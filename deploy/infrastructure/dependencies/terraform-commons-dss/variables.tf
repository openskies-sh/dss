
# This file has been automatically generated by /deploy/infrastructure/utils/generate_terraform_variables.py.
# Please do not modify manually.

variable "image" {
  type        = string
  description = <<EOT
  Full name of the docker image built in the section above. build.sh prints this name as
  the last thing it does when run with DOCKER_URL set. It should look something like
  gcr.io/your-project-id/dss:2020-07-01-46cae72cf if you built the image yourself as
  documented in /build/README.md, or docker.io/interuss/dss.

  `latest` can be used to use the latest official interuss docker image.

  Example: `latest` or `docker.io/interuss/dss:v0.6.0`
  EOT
}

variable "authorization" {
  type = object({
    public_key_pem_path = optional(string)
    jwks = optional(object({
      endpoint = string
      key_id   = string
    }))
  })
  description = <<EOT
    One of `public_key_pem_path` or `jwks` should be provided but not both.

    - public_key_pem_path
      If providing the access token public key via JWKS, do not provide this parameter.
      If providing a .pem file directly as the public key to validate incoming access tokens, specify the name
      of this .pem file here as /public-certs/YOUR-KEY-NAME.pem replacing YOUR-KEY-NAME as appropriate. For instance,
      if using the provided us-demo.pem, use the path /public-certs/us-demo.pem. Note that your .pem file should built
      in the docker image or mounted manually.
      Example:
      ```json
      Example 1 (dummy auth):
      {
        public_key_pem_path = "/test-certs/auth2.pem"
      }
      Example 2:
      {
        public_key_pem_path = "/jwt-public-certs/us-demo.pem"
      }
      ```

    - jwks
        If providing a .pem file directly as the public key to validate incoming access tokens, do not provide this parameter.
        - endpoint
          If providing the access token public key via JWKS, specify the JWKS endpoint here.
          Example: https://auth.example.com/.well-known/jwks.json
        - key_id:
          If providing the access token public key via JWKS, specify the kid (key ID) of they appropriate key in the JWKS file referenced above.
      Example:
      ```json
      {
        jwks = {
          endpoint = "https://auth.example.com/.well-known/jwks.json"
          key_id = "9C6DF78B-77A7-4E89-8990-E654841A7826"
        }
      }
      ```
  EOT

  validation {
    condition     = (var.authorization.jwks == null && var.authorization.public_key_pem_path != null) || (var.authorization.jwks != null && var.authorization.public_key_pem_path == null)
    error_message = "Public key to validate incoming access tokens shall be provided exclusively either with a .pem file or via JWKS."
  }
}

variable "enable_scd" {
  type        = bool
  description = "Set this boolean true to enable ASTM strategic conflict detection functionality"
  default     = true
}

variable "should_init" {
  type        = bool
  description = <<-EOT
    Set to false if joining an existing pool, true if creating the first DSS instance
    for a pool. When set true, this can initialize the data directories on your cluster,
    and prevent you from joining an existing pool.

    Example: `true`
    EOT
}

variable "desired_rid_db_version" {
  type        = string
  description = <<EOT
    Desired RID DB schema version.
    Use `latest` to use the latest schema version.

    Example: `4.0.0`
  EOT

  default = "latest"
}

variable "desired_scd_db_version" {
  type        = string
  description = <<EOT
    Desired SCD DB schema version.
    Use `latest` to use the latest schema version.

    Example: `3.1.0`
  EOT

  default = "latest"
}

variable "crdb_locality" {
  type        = string
  description = <<-EOT
    Unique name for your DSS instance. Currently, we recommend "<ORG_NAME>_<CLUSTER_NAME>",
    and the = character is not allowed. However, any unique (among all other participating
    DSS instances) value is acceptable.

    Example: <ORGNAME_CLUSTER_NAME>
  EOT
}

variable "crdb_external_nodes" {
  type        = list(string)
  description = <<-EOT
    Fully-qualified domain name of existing CRDB nodes outside of the cluster if you are joining an existing pool.
    Example: ["0.db.dss.example.com", "1.db.dss.example.com", "2.db.dss.example.com"]
  EOT
  default     = []
}

variable "kubernetes_namespace" {
  type        = string
  description = <<-EOT
    Namespace where to deploy Kubernetes resources. Only default is supported at the moment.

    Example: `default`
  EOT

  default = "default"

  # TODO: Adapt current deployment scripts in /build/deploy to support default is supported for the moment.
  validation {
    condition     = var.kubernetes_namespace == "default"
    error_message = "Only default namespace is supported at the moment"
  }
}

variable "app_hostname" {
  type        = string
  description = <<-EOT
  Fully-qualified domain name of your HTTPS Gateway ingress endpoint.

  Example: `dss.example.com`
  EOT
}

variable "crdb_hostname_suffix" {
  type        = string
  description = <<-EOT
  The domain name suffix shared by all of your CockroachDB nodes.
  For instance, if your CRDB nodes were addressable at 0.db.example.com,
  1.db.example.com and 2.db.example.com, then the value would be db.example.com.

  Example: db.example.com
  EOT
}

